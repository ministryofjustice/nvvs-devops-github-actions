on:
  workflow_call:
    secrets:
      TECH_SERVICES_JIRA_URL:
        description: 'jira URL passed from the caller workflow'
        required: true
      TECH_SERVICES_JIRA_EMAIL:
        description: 'email address passed from the caller workflow'
        required: true
      TECH_SERVICES_JIRA_TOKEN:
        description: 'A token passed from the caller workflow'
        required: true

jobs:
  check-open-prs:
    runs-on: ubuntu-latest
    name: Create or Update Jira Ticket
    steps:

      - name: List open Dependabot PRs on main branch
        id: list-prs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr list --repo ${{ github.repository }} --base main --json number,title,headRefName,author > pr_list.json
          if ! jq -e . pr_list.json > /dev/null 2>&1; then
            echo "Invalid JSON output from gh pr list"
            cat pr_list.json
            exit 1
          fi

      - name: Format PRs for Jira ticket Description
        id: format-prs
        run: |
          PR_DESCRIPTION=$(jq -r '.[] | "- PR Number: \(.number)  Title: \(.title)  Branch: \(.headRefName)  URL: https://github.com/${{ github.repository }}/pull/\(.number)\n"' pr_list.json | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "PR_DESCRIPTION=$PR_DESCRIPTION" >> $GITHUB_ENV

      - name: Find Jira tickets in project ND labeled Dependabot
        env:
          JIRA_URL: ${{ secrets.TECH_SERVICES_JIRA_URL }}
          JIRA_API_TOKEN: ${{ secrets.TECH_SERVICES_JIRA_TOKEN }}
          JIRA_USERNAME: ${{ secrets.TECH_SERVICES_JIRA_EMAIL }}
        run: |
          echo "Searching for issues with the 'JDTEST' label in project 'ND'..."
          
          # Define JQL query to find issues with the 'dependabot' label in the 'ND' project
          JQL_QUERY='project = ND AND labels in (JDTEST)'
          
          # Make API request to Jira to search for issues with the given label in the 'ND' project
          response=$(curl -s -u $JIRA_USERNAME:$JIRA_API_TOKEN \
            -X GET \
            -H "Content-Type: application/json" \
            "$JIRA_URL/rest/api/2/search?jql=project=ND%20AND%20labels%3D%27JDTEST%27")
          
          # Check if the response is valid JSON
               if echo "$response" | jq -e . >/dev/null 2>&1; then
          
          # Extract the first issue key from the response
               issue_id=$(echo "$response" | jq -r '.issues[0].key')
               
               if [ -z "$issue_id" ]; then
               echo "No issues found with the 'JDTEST' label in project 'ND'. Creating a new issue..."
               create_response=$(curl -s -u $JIRA_USERNAME:$JIRA_API_TOKEN \
               -X POST \
               -H "Content-Type: application/json" \
               --data "{\"fields\":{\"project\":{\"key\":\"ND\"},\"summary\":\"Dependabot PRs\",\"description\":\"$PR_DESCRIPTION\",\"labels\":[\"jira_dependabot\"]}}" \
               "$JIRA_URL/rest/api/2/issue")
               new_issue_id=$(echo "$create_response" | jq -r '.key')
               echo "Created new issue $new_issue_id"
               echo "ISSUE_ID=$new_issue_id" >> $GITHUB_ENV
               else
               echo "Found issue $issue_id. Updating the description..."
               update_response=$(curl -s -u $JIRA_USERNAME:$JIRA_API_TOKEN \
               -X PUT \
               -H "Content-Type: application/json" \
               --data "{\"fields\":{\"description\":\"$PR_DESCRIPTION\"}}" \
               "$JIRA_URL/rest/api/2/issue/$issue_id")
               echo "Updated issue $issue_id"
               echo "ISSUE_ID=$issue_id" >> $GITHUB_ENV
               fi
               else
               echo "Invalid JSON response"
               exit 1
               fi


      - name: Log created or updated issue
        run: |
              if [ -n "${{ env.ISSUE_ID }}" ]; then
                echo "Issue ${{ env.ISSUE_ID }} was created or updated"
              else
                echo "Failed to create or update issue"
                exit 1
              fi

      - name: Comment on GitHub
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const prs = JSON.parse(fs.readFileSync('pr_list.json', 'utf8'));
            prs.forEach(pr => {
              github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${{ env.ISSUE_ID }} created or updated on Jira board`
              });
            });

      - name: Transition issue
        uses: atlassian/gajira-transition@master
        with:
          issue: ${{ env.ISSUE_ID}}
          transition: "Backlog"
        continue-on-error: true